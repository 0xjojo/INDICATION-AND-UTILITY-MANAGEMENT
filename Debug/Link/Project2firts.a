;/*
; * T2_RTC.c
; *
; * Created: 05-Dec-20 4:31:52 PM
; * Author: Lost Heaven
; */
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;
;//variable the calculate the clock
;int sec = 0 ;
;int min = 0;
;int hour = 0;
;int ADC_read(unsigned char ch);
;//float ADC(void);
;char str_sec[3] = {'\0'}, str_min[3] = {'\0'}, str_hour[3] = {'\0'}; //declared to make clock in base hh:mm:ss
;void convert(void);
;void display(void);
;
;int temp = 0;//to get temprature of sensor
;int std = 0; //to get number of students
;void main(void)
; 0000 0019 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001A 	//initialize ADC 3
; 0000 001B 	DDRA.3 = 0;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001C 	PORTA.3 = 1;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001D 	ADMUX = 0b00000011; // choose adc 3
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001E 	ADCSRA = 0b10100011;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001F 
; 0000 0020 	lcd_init(16); //16 char per line in lcd
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0021 
; 0000 0022 	DDRD.0 = 1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0023 	//initialize timmer and choose the mode
; 0000 0024 	TCCR2 = 0b00000101;  //Normal mode, Output pin disconnected, pre = 128
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0025 	ASSR |= 1 << 3;      // Async mode enabled
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0026 	TIMSK |= 1 << 6;    //Overflow interrupt enable
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0027 
; 0000 0028 	lcd_gotoxy(4, 0); //to put the clock in good position in our opinion
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0029 	lcd_puts("00:00:00");//could be 08:00:00 if the library opens 8am
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002A 	temp =  ADC_read(3);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002B 	lcd_gotoxy(0, 1);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002C 	lcd_printf("%iC", temp);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002D 	DDRD.3 = 0; PORTD.3 = 1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002E #asm("sei")//general interrupt enable
;PCODE: $0000003E VOL: 0
; 0000 002F 	MCUCR = 0b00001000; //falling edge for interrupt 1
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0030 	GICR |= 1 << 7;     //Specific interrupt enable
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0031 	DDRB = 0xff;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0032 	PORTB.2 = 1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0033 
; 0000 0034 	MCUCR = 0b00000000;//falling edge for interupt2
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0035 	GICR |= 1 << 5;     //Specific interrupt enable
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0036 	/////////////////////////////////////////////////////////////////////////////////
; 0000 0037 	while (1)
;PCODE: $0000004D VOL: 0
; 0000 0038 		{
; 0000 0039 		if (0 < temp && temp < 10)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 003A 			{
; 0000 003B 			PORTB.4 = 0; PORTB.5 = 0;   //Two Heaters ON
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003C 			PORTB.6 = 1; PORTB.7 = 1;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 003D 			break;
;PCODE: $0000005F VOL: 0
; 0000 003E 			}
; 0000 003F 		if (10 <= temp && temp < 20)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0040 			{
; 0000 0041 			PORTB.4 = 0; PORTB.5 = 0;   //One Heater ON
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0042 			PORTB.6 = 0; PORTB.7 = 1;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0043 			break;
;PCODE: $00000073 VOL: 0
; 0000 0044 			}
; 0000 0045 		if (20 <= temp && temp < 30)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0046 			{
; 0000 0047 			PORTB.4 = 0; PORTB.5 = 0;   //All are OFF
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0048 			PORTB.6 = 0; PORTB.7 = 0;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0049 			break;
;PCODE: $00000087 VOL: 0
; 0000 004A 			}
; 0000 004B 		if (30 <= temp && temp < 40)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 004C 			{
; 0000 004D 			PORTB.4 = 1; PORTB.5 = 0;   //One air-conditioner ON
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004E 			PORTB.6 = 0; PORTB.7 = 0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 004F 			break;
;PCODE: $0000009B VOL: 0
; 0000 0050 			}
; 0000 0051 		if (40 <= temp && temp < 50)
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0052 			{
; 0000 0053 			PORTB.4 = 1; PORTB.5 = 1;   //Two air-conditioners ON
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0054 			PORTB.6 = 0; PORTB.7 = 0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0055 			break;
;PCODE: $000000AF VOL: 0
; 0000 0056 			}
; 0000 0057 		}
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0058 }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0

	.DSEG
_0x9:
	.BYTE 0x9
;/////////////////////////////////////////////////////////////////////////////////////
;interrupt [5] void T2Ov (void)
; 0000 005B {

	.CSEG
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 005C 
; 0000 005D 	sec++;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 005E 	if(sec >= 60)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 005F 		{
; 0000 0060 		sec = 0;
;PCODE: $000000BE VOL: 0
; 0000 0061 		min++;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0062 		}
; 0000 0063 	if (min >= 60)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0064 		{
; 0000 0065 		min = 0;
;PCODE: $000000C6 VOL: 0
; 0000 0066 		hour++;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0067 		}
; 0000 0068 	convert();
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0069 	display();
;PCODE: $000000CC VOL: 0
; 0000 006A 	lcd_gotoxy(2, 1);  //to print C in specific location
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 006B 	lcd_printf("C");
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 006C 	if (sec % 5 == 0)    //to display temprature every 5 sec
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 006D 		{
; 0000 006E 		temp =  ADC_read(3);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 006F 		lcd_gotoxy(0, 1);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0070 		lcd_printf("%i", temp);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0071 		}
; 0000 0072 
; 0000 0073 
; 0000 0074 }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;void convert(void)    //to convert time in base hh:mm:ss
; 0000 0076 {
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0077 	str_sec[1] = (sec % 10) + '0';
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0078 	str_sec[0] = (sec / 10) + '0';
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0079 
; 0000 007A 	str_min[1] = (min % 10) + '0';
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 007B 	str_min[0] = (min / 10) + '0';
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 007C 
; 0000 007D 
; 0000 007E 	str_hour[1] = (hour % 10) + '0';
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 007F 	str_hour[0] = (hour / 10) + '0';
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0080 	return;
;PCODE: $00000115 VOL: 0
; 0000 0081 }
;PCODE: $00000116 VOL: 0
;void display(void)  //display the clock in the middle of LCD to be clear
; 0000 0083 {
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0084 	lcd_gotoxy(10, 0);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0085 	lcd_puts(str_sec);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0086 
; 0000 0087 	lcd_gotoxy(7, 0);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0088 	lcd_puts(str_min);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0089 	lcd_gotoxy(4, 0);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 008A 	lcd_puts(str_hour);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 008B 	delay_ms(100);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 008C 	return;
;PCODE: $0000012E VOL: 0
; 0000 008D }
;PCODE: $0000012F VOL: 0
;
;
;/////////////////////////
;int ADC_read(unsigned char ch)  //analog to digital converter
; 0000 0092 {
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0093 	ADMUX = (ADMUX & 0b11100000) | ch; //Adjust channel
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;	ch -> R17
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0094 	ADCSRA.6 = 1 ;          //Start ADC conversion
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0095 	while (ADCSRA.6 == 1);  //Wait for conversion to end.
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0096 
; 0000 0097 	return ((ADCW / 255) * 13);  //Full scale is 50C (5 volts)
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0098 
; 0000 0099 
; 0000 009A }
;PCODE: $00000148 VOL: 0
;/////////////////////////////////////////////////
;interrupt [3] void ext1 (void)  //increse number of students as the enter door
; 0000 009D {
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 009E 	std++;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 009F 	lcd_gotoxy(6, 1);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00A0 	lcd_printf("%iSTD", std);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00A1 	if (std >= 25)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00A2 		{
; 0000 00A3 		lcd_gotoxy(12, 1);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00A4 		lcd_printf("FULL");
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00A5 		}
; 0000 00A6 
; 0000 00A7 	if(std < 10)
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00A8 	{PORTB.0 = 1; PORTB.1 = 0; PORTB.7 = 0;}
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00A9 	if(std >= 10 && std <= 20)
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00AA 	{PORTB.0 = 0; PORTB.1 = 1; PORTB.7 = 0;}
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00AB 	if(std > 20 )
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00AC 	{PORTB.0 = 0; PORTB.1 = 0; PORTB.7 = 1;}
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00AD 
; 0000 00AE }
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;/////////////////////////////////////////////////////////
;interrupt [19] void ext2 (void) //decrases number of students as exit door
; 0000 00B1 {
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00B2 	std--;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00B3 	lcd_gotoxy(6, 1);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00B4 	lcd_printf("%iSTD", std);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00B5 	if(std < 25)
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00B6 		{
; 0000 00B7 		lcd_gotoxy(12, 1);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00B8 		lcd_printf("    ");
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00B9 		}
; 0000 00BA 	if(std < 10)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00BB 	{PORTB.0 = 1; PORTB.1 = 0; PORTB.7 = 0;}
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00BC 	if(std >= 10 && std <= 20)
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00BD 	{PORTB.0 = 0; PORTB.1 = 1; PORTB.7 = 0;}
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00BE 	if(std > 20 )
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00BF 	{PORTB.0 = 0; PORTB.1 = 0; PORTB.7 = 1;}
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00C0 }
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
